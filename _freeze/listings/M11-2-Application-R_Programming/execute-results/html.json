{
  "hash": "b99342bb6943a887134b1f94b468b4b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"M11-2-Application-R_Programing.qmd\"\nauthor: \"William Jackson\"\ndate: \"2025-05-15 15:44:25\"\nformat: \n  html:\n    theme: darkly\n    toc: true\n    toc-location: right\n    toc-depth: 4\n    code-fold: false\n    code-line-numbers: true\n    code-link: true\n    number-sections: false\n    embed-resources: true\n    df-print: paged\nexecute: \n  freeze: auto\n  echo: true\n  warning: false\n  error: false\n---\n\n\n\n# Question 1\n\n>Create a vector \"quantity\" and assign 50 to it. If the quantity is greater than 20, your code should print \"You sold a lot\"; otherwise, print \"Not enough for today.\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector named \"quantity\"\nquantity <- 50\n\n# Check if quantity is greater than 20\nif (quantity > 20) {\n  print(\"You sold a lot\")\n} else {\n  print(\"Not enough for today.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"You sold a lot\"\n```\n\n\n:::\n:::\n\n\n# Question 2 \n> Create a vector \"sales\" and assign the value 25 to it. If the value is less than 20, your code should print \"Not enough for today.\" If the quantity sold is between 20 and 30 inclusively, print \"Average Day.\" If your sales amount is greater than 30, print out \"You had a great day!\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector named \"sales\"\nsales <- 25\n\n# Conditional checks\nif (sales < 20) {\n  print(\"Not enough for today.\")\n} else if (sales >= 20 && sales <= 30) {\n  print(\"Average Day.\")\n} else {\n  print(\"You had a great day!\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Average Day.\"\n```\n\n\n:::\n:::\n\n\n# Question 3 \n\n> Each product has its own category and also the respective tax rate applied to it. Therefore, products in category \"A\" are taxed by 8%, category \"B\" by 10%, and category \"C\" by 20%. Create a vector, \"category,\" and assign a value \"A\" to the vector. Also,  create a vector \"price\" and assign it 100. Create an if statement that identifies the categories and applies the tax rate to the price of this product. In the end, print the tax rate applied and the final price. For example, for a product in the \"B\" category (price=10), your printout must be: \"A tax rate of 10% is applied. The total price is 11.\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create vectors\ncategory <- \"A\"\nprice <- 100\n\n# Apply tax rate based on category\nif (category == \"A\") {\n  tax_rate <- 0.08\n} else if (category == \"B\") {\n  tax_rate <- 0.10\n} else if (category == \"C\") {\n  tax_rate <- 0.20\n} else {\n  tax_rate <- 0\n}\n\n# Calculate total price\ntotal_price <- price * (1 + tax_rate)\n\n# Print the results\nprint(paste0(\"A tax rate of \", tax_rate * 100, \"% is applied. The total price is \", total_price, \".\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A tax rate of 8% is applied. The total price is 108.\"\n```\n\n\n:::\n:::\n\n\n\n# Question 4 \n\n> Create a for loop to count the even numbers in a vector q4. This vector must contain the values 2, 5, 3, 9, 8, 11, and 6. Your output must be 3. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the vector q4\nq4 <- c(2, 5, 3, 9, 8, 11, 6)\n\n# Initialize counter\neven_count <- 0\n\n# For loop to count even numbers\nfor (num in q4) {\n  if (num %% 2 == 0) {\n    even_count <- even_count + 1\n  }\n}\n\n# Print the number of even numbers\nprint(even_count)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n# Question 5 \n> Create a vector q5 in the range of 1 to 8. For each one of the numbers in the vector, if it is greater than 4 and even, print it. Otherwise, print \"Condition not satisfied\".  Your output must have 8 lines, showing the numbers 6 and 8 in two of the eight lines. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the vector q5\nq5 <- 1:8\n\n# For loop to check conditions\nfor (num in q5) {\n  if (num > 4 && num %% 2 == 0) {\n    print(num)\n  } else {\n    print(\"Condition not satisfied\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Condition not satisfied\"\n[1] \"Condition not satisfied\"\n[1] \"Condition not satisfied\"\n[1] \"Condition not satisfied\"\n[1] \"Condition not satisfied\"\n[1] 6\n[1] \"Condition not satisfied\"\n[1] 8\n```\n\n\n:::\n:::\n\n\n\n# Question 6 \n\n> Create a function called \"pow\" that takes two arguments: x and y. The first argument is raised to the power of the second one, and prints the result like this: \"8 raised to the power of 2 is 64.\" Lastly, call the function with those values after creating the function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the function \"pow\"\npow <- function(x, y) {\n  result <- x^y\n  print(paste0(x, \" raised to the power of \", y, \" is \", result, \".\"))\n}\n\n# Call the function with x = 8 and y = 2\npow(8, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"8 raised to the power of 2 is 64.\"\n```\n\n\n:::\n:::\n\n\n\n# Question 7 \n\n> Q7.1. Run this line of code: df <- data.frame(x = 1:4, y = 5:8, z = 10:13). Use the apply function to get the mean and sum of each ROW on this dataframe. Add them to the data frame. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the dataframe\ndf <- data.frame(x = 1:4, y = 5:8, z = 10:13)\n\n# Calculate row means and sums using apply()\nrow_means <- apply(df, 1, mean)\nrow_sums <- apply(df, 1, sum)\n\n# Add the results to the original dataframe\ndf$mean <- row_means\ndf$sum <- row_sums\n\n# Print the updated dataframe\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y  z     mean sum\n1 1 5 10 5.333333  16\n2 2 6 11 6.333333  19\n3 3 7 12 7.333333  22\n4 4 8 13 8.333333  25\n```\n\n\n:::\n:::\n\n\n> Q7.2. Create a vector called q8 and assign the values 12, 18, and 6. Next, use the apply family and map family functions to calculate the square root of each element.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the vector q8\nq8 <- c(12, 18, 6)\n\n# Using sapply (apply family) to calculate the square root\nsqrt_sapply <- sapply(q8, sqrt)\nprint(sqrt_sapply)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.464102 4.242641 2.449490\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using purrr::map (map family) to calculate the square root\nlibrary(purrr)\nsqrt_map <- map_dbl(q8, sqrt)  # map_dbl because we want numeric output\nprint(sqrt_map)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.464102 4.242641 2.449490\n```\n\n\n:::\n:::\n\n\n\n> Q7.3. Run this code below: q9 <- list(A = 1:5, B = 6:20, C = 1). Use the apply family and map family functions to calculate the number of components of each element of this list. *Hint*: Use the length function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the list q9\nq9 <- list(A = 1:5, B = 6:20, C = 1)\n\n# Using sapply (apply family) to calculate the length of each element in the list\nlength_sapply <- sapply(q9, length)\nprint(length_sapply)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n A  B  C \n 5 15  1 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Using purrr::map (map family) to calculate the length of each element\nlibrary(purrr)\nlength_map <- map_int(q9, length)  # map_int because we want integer output\nprint(length_map)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n A  B  C \n 5 15  1 \n```\n\n\n:::\n:::\n\n\n\n>Q7.4. What is the difference between lapply and sapply functions. Which map functions are similar to them? Consider that you want to calculate the exponentials of three numbers. In this case, which function you should use and why? Type your answer as a comment?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Difference between lapply and sapply:\n\n# lapply() returns a list regardless of the output structure, even if the results can be simplified.\n# sapply() attempts to simplify the output (for example, into a vector, matrix, or array) whenever possible.\n\n# Map equivalents:\n# - lapply() is similar to map() (both return a list).\n# - sapply() is similar to map_lgl(), map_int(), map_dbl(), or map_chr(), depending on the desired output type.\n\n# To calculate exponentials of three numbers:\nnumbers <- c(2, 3, 4)\n\n# Using lapply() (returns a list)\nexp_lapply <- lapply(numbers, exp)\nprint(exp_lapply)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 7.389056\n\n[[2]]\n[1] 20.08554\n\n[[3]]\n[1] 54.59815\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using sapply() (returns a vector)\nexp_sapply <- sapply(numbers, exp)\nprint(exp_sapply)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  7.389056 20.085537 54.598150\n```\n\n\n:::\n\n```{.r .cell-code}\n# The best function to use depends on the desired output:\n# If you want a list of the results, use lapply().\n# If you want a simplified output like a numeric vector, use sapply().\n\n# In this case, I would recommend using sapply() because the result is numeric and simplified (vector), \n# which is more appropriate when you're calculating exponentials for a set of numbers and need a vector of results.\n```\n:::\n\n\n\n# Question 8 \n\n> Q8.1: First, execute the following codes in the code chunk to read the data into R and set the global theme. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ntheme_set(theme_bw())\n\nstudent_ratio <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-07/student_teacher_ratio.csv\")\n```\n:::\n\n\n> Q8.2. Explore the data. Especially count the number of \"year\", the \"indicator\", and \"country\", separately. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count the number of unique years\nyear_count <- student_ratio %>%\n  count(year)\n\n# Count the number of unique indicators\nindicator_count <- student_ratio %>%\n  count(indicator)\n\n# Count the number of unique countries\ncountry_count <- student_ratio %>%\n  count(country)\n\n# Display the counts\nyear_count\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"year\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2012\",\"2\":\"887\"},{\"1\":\"2013\",\"2\":\"880\"},{\"1\":\"2014\",\"2\":\"913\"},{\"1\":\"2015\",\"2\":\"921\"},{\"1\":\"2016\",\"2\":\"917\"},{\"1\":\"2017\",\"2\":\"635\"},{\"1\":\"2018\",\"2\":\"36\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nindicator_count\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"indicator\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Lower Secondary Education\",\"2\":\"739\"},{\"1\":\"Post-Secondary Non-Tertiary Education\",\"2\":\"494\"},{\"1\":\"Pre-Primary Education\",\"2\":\"837\"},{\"1\":\"Primary Education\",\"2\":\"1029\"},{\"1\":\"Secondary Education\",\"2\":\"840\"},{\"1\":\"Tertiary Education\",\"2\":\"550\"},{\"1\":\"Upper Secondary Education\",\"2\":\"700\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ncountry_count\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"country\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Afghanistan\",\"2\":\"13\"},{\"1\":\"Africa (Northern)\",\"2\":\"30\"},{\"1\":\"Africa (Sub-Saharan)\",\"2\":\"28\"},{\"1\":\"Albania\",\"2\":\"36\"},{\"1\":\"Algeria\",\"2\":\"18\"},{\"1\":\"Andorra\",\"2\":\"29\"},{\"1\":\"Angola\",\"2\":\"7\"},{\"1\":\"Antigua and Barbuda\",\"2\":\"13\"},{\"1\":\"Arab States\",\"2\":\"30\"},{\"1\":\"Argentina\",\"2\":\"5\"},{\"1\":\"Armenia\",\"2\":\"18\"},{\"1\":\"Aruba\",\"2\":\"11\"},{\"1\":\"Asia (Central and Southern)\",\"2\":\"29\"},{\"1\":\"Asia (Central)\",\"2\":\"30\"},{\"1\":\"Asia (Eastern and South-eastern)\",\"2\":\"30\"},{\"1\":\"Asia (Eastern)\",\"2\":\"30\"},{\"1\":\"Asia (South-eastern)\",\"2\":\"30\"},{\"1\":\"Asia (Southern)\",\"2\":\"29\"},{\"1\":\"Asia (Western)\",\"2\":\"27\"},{\"1\":\"Austria\",\"2\":\"42\"},{\"1\":\"Azerbaijan\",\"2\":\"20\"},{\"1\":\"Bahamas\",\"2\":\"5\"},{\"1\":\"Bahrain\",\"2\":\"39\"},{\"1\":\"Bangladesh\",\"2\":\"19\"},{\"1\":\"Barbados\",\"2\":\"21\"},{\"1\":\"Belarus\",\"2\":\"36\"},{\"1\":\"Belgium\",\"2\":\"32\"},{\"1\":\"Belize\",\"2\":\"34\"},{\"1\":\"Benin\",\"2\":\"19\"},{\"1\":\"Bermuda\",\"2\":\"24\"},{\"1\":\"Bhutan\",\"2\":\"32\"},{\"1\":\"Bolivia (Plurinational State of)\",\"2\":\"24\"},{\"1\":\"Bosnia and Herzegovina\",\"2\":\"29\"},{\"1\":\"Botswana\",\"2\":\"7\"},{\"1\":\"Brazil\",\"2\":\"33\"},{\"1\":\"British Virgin Islands\",\"2\":\"12\"},{\"1\":\"Brunei Darussalam\",\"2\":\"37\"},{\"1\":\"Bulgaria\",\"2\":\"28\"},{\"1\":\"Burkina Faso\",\"2\":\"28\"},{\"1\":\"Burundi\",\"2\":\"35\"},{\"1\":\"Cabo Verde\",\"2\":\"33\"},{\"1\":\"Cambodia\",\"2\":\"20\"},{\"1\":\"Cameroon\",\"2\":\"29\"},{\"1\":\"Canada\",\"2\":\"10\"},{\"1\":\"Cayman Islands\",\"2\":\"12\"},{\"1\":\"Central African Republic\",\"2\":\"6\"},{\"1\":\"Central Asia\",\"2\":\"30\"},{\"1\":\"Central and Eastern Europe\",\"2\":\"26\"},{\"1\":\"Chad\",\"2\":\"19\"},{\"1\":\"Chile\",\"2\":\"33\"},{\"1\":\"China\",\"2\":\"30\"},{\"1\":\"China, Hong Kong Special Administrative Region\",\"2\":\"12\"},{\"1\":\"China, Macao Special Administrative Region\",\"2\":\"42\"},{\"1\":\"Colombia\",\"2\":\"32\"},{\"1\":\"Comoros\",\"2\":\"15\"},{\"1\":\"Congo\",\"2\":\"7\"},{\"1\":\"Cook Islands\",\"2\":\"15\"},{\"1\":\"Costa Rica\",\"2\":\"25\"},{\"1\":\"Croatia\",\"2\":\"35\"},{\"1\":\"Cuba\",\"2\":\"31\"},{\"1\":\"Cyprus\",\"2\":\"28\"},{\"1\":\"Czechia\",\"2\":\"14\"},{\"1\":\"Côte d'Ivoire\",\"2\":\"19\"},{\"1\":\"Democratic People's Republic of Korea\",\"2\":\"7\"},{\"1\":\"Democratic Republic of the Congo\",\"2\":\"17\"},{\"1\":\"Denmark\",\"2\":\"10\"},{\"1\":\"Djibouti\",\"2\":\"36\"},{\"1\":\"Dominica\",\"2\":\"18\"},{\"1\":\"Dominican Republic\",\"2\":\"34\"},{\"1\":\"East Asia and the Pacific\",\"2\":\"30\"},{\"1\":\"Ecuador\",\"2\":\"32\"},{\"1\":\"Egypt\",\"2\":\"12\"},{\"1\":\"El Salvador\",\"2\":\"27\"},{\"1\":\"Equatorial Guinea\",\"2\":\"5\"},{\"1\":\"Eritrea\",\"2\":\"31\"},{\"1\":\"Estonia\",\"2\":\"13\"},{\"1\":\"Eswatini\",\"2\":\"14\"},{\"1\":\"Ethiopia\",\"2\":\"4\"},{\"1\":\"Europe\",\"2\":\"30\"},{\"1\":\"Fiji\",\"2\":\"6\"},{\"1\":\"Finland\",\"2\":\"28\"},{\"1\":\"France\",\"2\":\"12\"},{\"1\":\"Gambia\",\"2\":\"18\"},{\"1\":\"Georgia\",\"2\":\"27\"},{\"1\":\"Germany\",\"2\":\"32\"},{\"1\":\"Ghana\",\"2\":\"40\"},{\"1\":\"Gibraltar\",\"2\":\"12\"},{\"1\":\"Greece\",\"2\":\"26\"},{\"1\":\"Grenada\",\"2\":\"31\"},{\"1\":\"Guatemala\",\"2\":\"28\"},{\"1\":\"Guinea\",\"2\":\"11\"},{\"1\":\"Guyana\",\"2\":\"7\"},{\"1\":\"High income countries\",\"2\":\"30\"},{\"1\":\"Holy See\",\"2\":\"42\"},{\"1\":\"Honduras\",\"2\":\"25\"},{\"1\":\"Hungary\",\"2\":\"35\"},{\"1\":\"Iceland\",\"2\":\"13\"},{\"1\":\"India\",\"2\":\"27\"},{\"1\":\"Indonesia\",\"2\":\"34\"},{\"1\":\"Iran (Islamic Republic of)\",\"2\":\"26\"},{\"1\":\"Ireland\",\"2\":\"1\"},{\"1\":\"Israel\",\"2\":\"8\"},{\"1\":\"Italy\",\"2\":\"23\"},{\"1\":\"Jamaica\",\"2\":\"13\"},{\"1\":\"Japan\",\"2\":\"22\"},{\"1\":\"Jordan\",\"2\":\"25\"},{\"1\":\"Kazakhstan\",\"2\":\"27\"},{\"1\":\"Kenya\",\"2\":\"11\"},{\"1\":\"Kiribati\",\"2\":\"11\"},{\"1\":\"Kuwait\",\"2\":\"14\"},{\"1\":\"Kyrgyzstan\",\"2\":\"23\"},{\"1\":\"Landlocked Developing Countries\",\"2\":\"30\"},{\"1\":\"Lao People's Democratic Republic\",\"2\":\"35\"},{\"1\":\"Latin America and the Caribbean\",\"2\":\"60\"},{\"1\":\"Latvia\",\"2\":\"35\"},{\"1\":\"Least Developed Countries\",\"2\":\"30\"},{\"1\":\"Lebanon\",\"2\":\"30\"},{\"1\":\"Lesotho\",\"2\":\"20\"},{\"1\":\"Liberia\",\"2\":\"16\"},{\"1\":\"Liechtenstein\",\"2\":\"26\"},{\"1\":\"Lithuania\",\"2\":\"33\"},{\"1\":\"Low income countries\",\"2\":\"28\"},{\"1\":\"Lower middle income countries\",\"2\":\"30\"},{\"1\":\"Luxembourg\",\"2\":\"28\"},{\"1\":\"Madagascar\",\"2\":\"26\"},{\"1\":\"Malawi\",\"2\":\"10\"},{\"1\":\"Malaysia\",\"2\":\"26\"},{\"1\":\"Maldives\",\"2\":\"18\"},{\"1\":\"Mali\",\"2\":\"26\"},{\"1\":\"Malta\",\"2\":\"35\"},{\"1\":\"Marshall Islands\",\"2\":\"2\"},{\"1\":\"Mauritania\",\"2\":\"24\"},{\"1\":\"Mauritius\",\"2\":\"17\"},{\"1\":\"Mexico\",\"2\":\"39\"},{\"1\":\"Micronesia (Federated States of)\",\"2\":\"2\"},{\"1\":\"Middle income countries\",\"2\":\"30\"},{\"1\":\"Monaco\",\"2\":\"12\"},{\"1\":\"Mongolia\",\"2\":\"14\"},{\"1\":\"Montenegro\",\"2\":\"7\"},{\"1\":\"Montserrat\",\"2\":\"10\"},{\"1\":\"Morocco\",\"2\":\"15\"},{\"1\":\"Mozambique\",\"2\":\"23\"},{\"1\":\"Myanmar\",\"2\":\"16\"},{\"1\":\"Namibia\",\"2\":\"6\"},{\"1\":\"Nauru\",\"2\":\"11\"},{\"1\":\"Nepal\",\"2\":\"37\"},{\"1\":\"Netherlands\",\"2\":\"33\"},{\"1\":\"New Zealand\",\"2\":\"32\"},{\"1\":\"Niger\",\"2\":\"35\"},{\"1\":\"Nigeria\",\"2\":\"1\"},{\"1\":\"Niue\",\"2\":\"15\"},{\"1\":\"North America and Western Europe\",\"2\":\"30\"},{\"1\":\"Northern America\",\"2\":\"25\"},{\"1\":\"Northern America and Europe\",\"2\":\"30\"},{\"1\":\"Norway\",\"2\":\"19\"},{\"1\":\"Oceania\",\"2\":\"12\"},{\"1\":\"Oceania (excl. Australia/New Zealand)\",\"2\":\"30\"},{\"1\":\"Oman\",\"2\":\"18\"},{\"1\":\"Pakistan\",\"2\":\"25\"},{\"1\":\"Palau\",\"2\":\"2\"},{\"1\":\"Palestine\",\"2\":\"37\"},{\"1\":\"Panama\",\"2\":\"26\"},{\"1\":\"Papua New Guinea\",\"2\":\"9\"},{\"1\":\"Paraguay\",\"2\":\"7\"},{\"1\":\"Peru\",\"2\":\"26\"},{\"1\":\"Philippines\",\"2\":\"11\"},{\"1\":\"Poland\",\"2\":\"34\"},{\"1\":\"Portugal\",\"2\":\"30\"},{\"1\":\"Puerto Rico\",\"2\":\"29\"},{\"1\":\"Qatar\",\"2\":\"38\"},{\"1\":\"Republic of Korea\",\"2\":\"34\"},{\"1\":\"Republic of Moldova\",\"2\":\"39\"},{\"1\":\"Romania\",\"2\":\"33\"},{\"1\":\"Russian Federation\",\"2\":\"10\"},{\"1\":\"Rwanda\",\"2\":\"31\"},{\"1\":\"Saint Kitts and Nevis\",\"2\":\"20\"},{\"1\":\"Saint Lucia\",\"2\":\"34\"},{\"1\":\"Saint Vincent and the Grenadines\",\"2\":\"17\"},{\"1\":\"Samoa\",\"2\":\"10\"},{\"1\":\"San Marino\",\"2\":\"3\"},{\"1\":\"Sao Tome and Principe\",\"2\":\"24\"},{\"1\":\"Saudi Arabia\",\"2\":\"28\"},{\"1\":\"Senegal\",\"2\":\"24\"},{\"1\":\"Serbia\",\"2\":\"37\"},{\"1\":\"Seychelles\",\"2\":\"28\"},{\"1\":\"Sierra Leone\",\"2\":\"25\"},{\"1\":\"Singapore\",\"2\":\"5\"},{\"1\":\"Sint Maarten (Dutch part)\",\"2\":\"7\"},{\"1\":\"Slovakia\",\"2\":\"28\"},{\"1\":\"Slovenia\",\"2\":\"34\"},{\"1\":\"Small Island Developing States\",\"2\":\"60\"},{\"1\":\"Solomon Islands\",\"2\":\"16\"},{\"1\":\"South Africa\",\"2\":\"10\"},{\"1\":\"South Sudan\",\"2\":\"6\"},{\"1\":\"South and West Asia\",\"2\":\"29\"},{\"1\":\"Spain\",\"2\":\"30\"},{\"1\":\"Sri Lanka\",\"2\":\"19\"},{\"1\":\"Sub-Saharan Africa\",\"2\":\"28\"},{\"1\":\"Sudan\",\"2\":\"21\"},{\"1\":\"Suriname\",\"2\":\"26\"},{\"1\":\"Sweden\",\"2\":\"34\"},{\"1\":\"Switzerland\",\"2\":\"22\"},{\"1\":\"Syrian Arab Republic\",\"2\":\"7\"},{\"1\":\"Tajikistan\",\"2\":\"18\"},{\"1\":\"Thailand\",\"2\":\"18\"},{\"1\":\"The former Yugoslav Republic of Macedonia\",\"2\":\"22\"},{\"1\":\"Timor-Leste\",\"2\":\"15\"},{\"1\":\"Togo\",\"2\":\"16\"},{\"1\":\"Tokelau\",\"2\":\"4\"},{\"1\":\"Tonga\",\"2\":\"12\"},{\"1\":\"Tunisia\",\"2\":\"10\"},{\"1\":\"Turkey\",\"2\":\"29\"},{\"1\":\"Turkmenistan\",\"2\":\"1\"},{\"1\":\"Turks and Caicos Islands\",\"2\":\"3\"},{\"1\":\"Tuvalu\",\"2\":\"12\"},{\"1\":\"Uganda\",\"2\":\"14\"},{\"1\":\"Ukraine\",\"2\":\"15\"},{\"1\":\"United Arab Emirates\",\"2\":\"24\"},{\"1\":\"United Kingdom of Great Britain and Northern Ireland\",\"2\":\"27\"},{\"1\":\"United Republic of Tanzania\",\"2\":\"14\"},{\"1\":\"United States of America\",\"2\":\"25\"},{\"1\":\"Upper middle income countries\",\"2\":\"30\"},{\"1\":\"Uruguay\",\"2\":\"13\"},{\"1\":\"Uzbekistan\",\"2\":\"42\"},{\"1\":\"Vanuatu\",\"2\":\"9\"},{\"1\":\"Venezuela (Bolivarian Republic of)\",\"2\":\"4\"},{\"1\":\"Viet Nam\",\"2\":\"27\"},{\"1\":\"Western Asia and Northern Africa\",\"2\":\"30\"},{\"1\":\"World\",\"2\":\"60\"},{\"1\":\"Yemen\",\"2\":\"7\"},{\"1\":\"Zambia\",\"2\":\"10\"},{\"1\":\"Zimbabwe\",\"2\":\"8\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n> Q8.3. Next, draw a chart that shows the top and bottom 10 countries in student-teacher ratio for 2012. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect column names to confirm the correct column name for the ratio\ncolnames(student_ratio)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"edulit_ind\"    \"indicator\"     \"country_code\"  \"country\"      \n[5] \"year\"          \"student_ratio\" \"flag_codes\"    \"flags\"        \n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter the data for the year 2012\ndata_2012 <- student_ratio %>%\n  filter(year == 2012) %>%\n  arrange(desc(student_ratio))  # Sort by the student-teacher ratio\n\n# Get the top and bottom 10 countries\ntop_bottom_10 <- bind_rows(\n  head(data_2012, 10),  # Top 10 countries\n  tail(data_2012, 10)   # Bottom 10 countries\n)\n\n# Create a bar chart to visualize the top and bottom 10 countries\nggplot(top_bottom_10, aes(x = reorder(country, student_ratio), y = student_ratio, fill = student_ratio > 1)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  # Flip the coordinates for better readability\n  labs(\n    title = \"Top and Bottom 10 Countries in Student-Teacher Ratio (2012)\",\n    x = \"Country\",\n    y = \"Student-Teacher Ratio\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n> Q8.4. Note that there are six years from 2012 to 2017 that have a significant number of observations, conducive for drawing charts by year. Since you don't want to copy and paste the code again and again, you want to create a function that allows you to use it to draw all the charts by simply entering \"year\" information into the function. You will want to show \"year\" information in the chart as a subtitle. Create such a function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the function to create a chart for a given year\ncreate_student_teacher_chart <- function(year) {\n  # Filter the data for the specified year\n  data_year <- student_ratio %>%\n    filter(year == year) %>%\n    arrange(desc(student_ratio))  # Sort by the student-teacher ratio\n  \n  # Get the top and bottom 10 countries\n  top_bottom_10 <- bind_rows(\n    head(data_year, 10),  # Top 10 countries\n    tail(data_year, 10)   # Bottom 10 countries\n  )\n  \n  # Create the bar chart\n  ggplot(top_bottom_10, aes(x = reorder(country, student_ratio), y = student_ratio, fill = student_ratio > 1)) +\n    geom_bar(stat = \"identity\") +\n    coord_flip() +  # Flip the coordinates for better readability\n    labs(\n      title = paste(\"Top and Bottom 10 Countries in Student-Teacher Ratio\"),\n      subtitle = paste(\"Year:\", year),  # Add the year as a subtitle\n      x = \"Country\",\n      y = \"Student-Teacher Ratio\"\n    ) +\n    theme_minimal()\n}\n\n# Example usage: Call the function for the year 2012\ncreate_student_teacher_chart(2012)\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n> Q8.5. Draw all charts for 2012 through 2017 using the function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Remove rows with missing student_ratio values\nstudent_ratio_clean <- na.omit(student_ratio)\n\n# Check the structure of the cleaned data\nsummary(student_ratio_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  edulit_ind         indicator         country_code         country         \n Length:679         Length:679         Length:679         Length:679        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      year      student_ratio      flag_codes           flags          \n Min.   :2012   Min.   :  2.418   Length:679         Length:679        \n 1st Qu.:2013   1st Qu.: 14.332   Class :character   Class :character  \n Median :2014   Median : 18.785   Mode  :character   Mode  :character  \n Mean   :2015   Mean   : 20.998                                        \n 3rd Qu.:2016   3rd Qu.: 23.800                                        \n Max.   :2017   Max.   :155.000                                        \n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter the data for 2012\ndata_2012 <- student_ratio_clean %>%\n  filter(year == 2012) %>%\n  arrange(desc(student_ratio))\n\n# Get the top and bottom 10 countries\ntop_bottom_10 <- bind_rows(\n  head(data_2012, 10),  # Top 10 countries\n  tail(data_2012, 10)   # Bottom 10 countries\n)\n\n# Create a bar chart for 2012\nggplot(top_bottom_10, aes(x = reorder(country, student_ratio), y = student_ratio, fill = student_ratio > 1)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(\n    title = \"Top and Bottom 10 Countries in Student-Teacher Ratio\",\n    subtitle = \"Year: 2012\",\n    x = \"Country\",\n    y = \"Student-Teacher Ratio\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n# Question 9 \n\n> Q9.0. Read the following data in R and be prepared for analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_outcomes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-21/animal_outcomes.csv')\nanimal_complaints <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-21/animal_complaints.csv')\nbrisbane_complaints <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-21/brisbane_complaints.csv')\n```\n:::\n\n\n\n> Q9.1. First, briefly take a look at each data set. You will notice that some variables are lower case while others are upper case. You will also notice that some variables are consist of more than one word. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the structure of each dataset to check variables and data types\nstr(animal_outcomes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [664 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year       : num [1:664] 1999 1999 1999 1999 1999 ...\n $ animal_type: chr [1:664] \"Dogs\" \"Dogs\" \"Dogs\" \"Dogs\" ...\n $ outcome    : chr [1:664] \"Reclaimed\" \"Rehomed\" \"Other\" \"Euthanized\" ...\n $ ACT        : num [1:664] 610 1245 12 360 111 ...\n $ NSW        : num [1:664] 3140 7525 745 9221 201 ...\n $ NT         : num [1:664] 205 526 955 9 22 269 0 847 1 3 ...\n $ QLD        : num [1:664] 1392 5489 860 9214 206 ...\n $ SA         : num [1:664] 2329 1105 380 1701 157 ...\n $ TAS        : num [1:664] 516 480 168 599 31 ...\n $ VIC        : num [1:664] 7130 4908 1001 5217 884 ...\n $ WA         : num [1:664] 1 137 6 18 0 62 5 5 0 0 ...\n $ Total      : num [1:664] 15323 21415 4127 26339 1612 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   year = col_double(),\n  ..   animal_type = col_character(),\n  ..   outcome = col_character(),\n  ..   ACT = col_double(),\n  ..   NSW = col_double(),\n  ..   NT = col_double(),\n  ..   QLD = col_double(),\n  ..   SA = col_double(),\n  ..   TAS = col_double(),\n  ..   VIC = col_double(),\n  ..   WA = col_double(),\n  ..   Total = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(animal_complaints)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [42,413 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Animal Type       : chr [1:42413] \"dog\" \"dog\" \"dog\" \"dog\" ...\n $ Complaint Type    : chr [1:42413] \"Aggressive Animal\" \"Noise\" \"Noise\" \"Private Impound\" ...\n $ Date Received     : chr [1:42413] \"June 2020\" \"June 2020\" \"June 2020\" \"June 2020\" ...\n $ Suburb            : chr [1:42413] \"Alice River\" \"Alice River\" \"Alice River\" \"Alice River\" ...\n $ Electoral Division: chr [1:42413] \"Division 1\" \"Division 1\" \"Division 1\" \"Division 1\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `Animal Type` = col_character(),\n  ..   `Complaint Type` = col_character(),\n  ..   `Date Received` = col_character(),\n  ..   Suburb = col_character(),\n  ..   `Electoral Division` = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n\n```{.r .cell-code}\nstr(brisbane_complaints)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [31,330 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ nature            : chr [1:31330] \"Animal\" \"Animal\" \"Animal\" \"Animal\" ...\n $ animal_type       : chr [1:31330] \"Dog\" \"Dog\" \"Dog\" \"Dog\" ...\n $ category          : chr [1:31330] \"Fencing Issues\" \"Fencing Issues\" \"Defecating In Public\" \"Fencing Issues\" ...\n $ suburb            : chr [1:31330] \"SUNNYBANK\" \"SUNNYBANK HILLS\" \"SUNNYBANK\" \"SUNNYBANK\" ...\n $ date_range        : chr [1:31330] \"1st-quarter-2016-17.csv\" \"1st-quarter-2016-17.csv\" \"1st-quarter-2016-17.csv\" \"1st-quarter-2016-17.csv\" ...\n $ responsible_office: chr [1:31330] NA NA NA NA ...\n $ city              : chr [1:31330] \"Brisbane\" \"Brisbane\" \"Brisbane\" \"Brisbane\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   nature = col_character(),\n  ..   animal_type = col_character(),\n  ..   category = col_character(),\n  ..   suburb = col_character(),\n  ..   date_range = col_character(),\n  ..   responsible_office = col_character(),\n  ..   city = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n\n```{.r .cell-code}\n# View the column names of each dataset to check case and multi-word variable names\ncolnames(animal_outcomes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"        \"animal_type\" \"outcome\"     \"ACT\"         \"NSW\"        \n [6] \"NT\"          \"QLD\"         \"SA\"          \"TAS\"         \"VIC\"        \n[11] \"WA\"          \"Total\"      \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(animal_complaints)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Animal Type\"        \"Complaint Type\"     \"Date Received\"     \n[4] \"Suburb\"             \"Electoral Division\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(brisbane_complaints)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"nature\"             \"animal_type\"        \"category\"          \n[4] \"suburb\"             \"date_range\"         \"responsible_office\"\n[7] \"city\"              \n```\n\n\n:::\n:::\n\n\n> Q9.2. Create a pipeable function that will help you clean up the variable names across the data set, clean them up using the function, and reassign the data sets to the same names to overwrite them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a function to clean column names\nclean_colnames <- function(df) {\n  colnames(df) <- tolower(gsub(\" \", \"_\", colnames(df)))\n  return(df)\n}\n\n# Clean up the column names in each dataset using the function\nanimal_outcomes <- animal_outcomes %>% clean_colnames()\nanimal_complaints <- animal_complaints %>% clean_colnames()\nbrisbane_complaints <- brisbane_complaints %>% clean_colnames()\n\n# View the updated column names for verification\ncolnames(animal_outcomes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"        \"animal_type\" \"outcome\"     \"act\"         \"nsw\"        \n [6] \"nt\"          \"qld\"         \"sa\"          \"tas\"         \"vic\"        \n[11] \"wa\"          \"total\"      \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(animal_complaints)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"animal_type\"        \"complaint_type\"     \"date_received\"     \n[4] \"suburb\"             \"electoral_division\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(brisbane_complaints)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"nature\"             \"animal_type\"        \"category\"          \n[4] \"suburb\"             \"date_range\"         \"responsible_office\"\n[7] \"city\"              \n```\n\n\n:::\n:::\n\n\n\n> Q9.3. Create a pipeable function that can draw a bar chart showing a count of a variable from any of the three data sets above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a pipeable function to draw a bar chart for a variable\ndraw_bar_chart <- function(df, variable) {\n  df %>%\n    count(!!sym(variable)) %>%  # Count occurrences of each unique value in the variable\n    ggplot(aes(x = !!sym(variable), y = n)) +  # Plot the variable on x and count on y\n    geom_bar(stat = \"identity\") +  # Use identity to plot the count\n    theme_minimal() +  # Clean theme\n    labs(x = variable, y = \"Count\", title = paste(\"Count of\", variable))  # Labels and title\n}\n\n# Example usage:\n# Drawing a bar chart for 'animal_type' from the animal_outcomes dataset\ndraw_bar_chart(animal_outcomes, \"animal_type\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Drawing a bar chart for 'complaint_type' from the animal_complaints dataset\ndraw_bar_chart(animal_complaints, \"complaint_type\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Drawing a bar chart for 'category' from the brisbane_complaints dataset\ndraw_bar_chart(brisbane_complaints, \"category\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n:::\n\n\n\n> Q9.4. Then, using the function, create two bar charts of your interest from each data set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the janitor package\nlibrary(janitor)\n\n# Clean column names in all datasets\nanimal_outcomes <- animal_outcomes %>% clean_names()\nanimal_complaints <- animal_complaints %>% clean_names()\nbrisbane_complaints <- brisbane_complaints %>% clean_names()\n\n# Verify the column names to ensure they are cleaned properly\ncolnames(animal_outcomes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"        \"animal_type\" \"outcome\"     \"act\"         \"nsw\"        \n [6] \"nt\"          \"qld\"         \"sa\"          \"tas\"         \"vic\"        \n[11] \"wa\"          \"total\"      \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(animal_complaints)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"animal_type\"        \"complaint_type\"     \"date_received\"     \n[4] \"suburb\"             \"electoral_division\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(brisbane_complaints)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"nature\"             \"animal_type\"        \"category\"          \n[4] \"suburb\"             \"date_range\"         \"responsible_office\"\n[7] \"city\"              \n```\n\n\n:::\n\n```{.r .cell-code}\n# Drawing two bar charts for animal_outcomes dataset:\n# 1. Count of animal types\ndraw_bar_chart(animal_outcomes, \"animal_type\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 2. Count of outcomes\ndraw_bar_chart(animal_outcomes, \"outcome\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Drawing two bar charts for animal_complaints dataset:\n# 1. Count of complaint types\ndraw_bar_chart(animal_complaints, \"complaint_type\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-20-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# 2. Count of animal types\ndraw_bar_chart(animal_complaints, \"animal_type\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-20-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Drawing two bar charts for brisbane_complaints dataset:\n# 1. Count of complaint categories\ndraw_bar_chart(brisbane_complaints, \"category\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-20-5.png){width=672}\n:::\n\n```{.r .cell-code}\n# 2. Count of suburbs\ndraw_bar_chart(brisbane_complaints, \"suburb\")\n```\n\n::: {.cell-output-display}\n![](M11-2-Application-R_Programming_files/figure-html/unnamed-chunk-20-6.png){width=672}\n:::\n:::\n\n\n\n# Question 10 \n\n> In this question, you will work with \"airquality\" data set, which is built-in data available from R Studio. The goal is to create a function that calculates average Ozone amount for each month. *Hints*: Use nested data. You will have to create multiple functions with one function embedded in another. Also, use one of the map() functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(purrr)\n\n# Define the function to calculate average Ozone per month\ncalculate_avg_ozone_per_month <- function(data) {\n  # Helper function to calculate average for a specific month\n  calc_avg_ozone <- function(month) {\n    data %>%\n      filter(Month == month) %>%\n      summarise(avg_ozone = mean(Ozone, na.rm = TRUE)) %>%\n      pull(avg_ozone)\n  }\n  \n  # Get unique months (the months are represented by 5 to 9 in the airquality dataset)\n  months <- unique(data$Month)\n  \n  # Use map to apply the helper function to each month\n  avg_ozone_by_month <- map_dbl(months, calc_avg_ozone)\n  \n  # Return results in a tibble\n  tibble(Month = months, Avg_Ozone = avg_ozone_by_month)\n}\n\n# Apply the function on the airquality data\naverage_ozone <- calculate_avg_ozone_per_month(airquality)\nprint(average_ozone)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Month Avg_Ozone\n  <int>     <dbl>\n1     5      23.6\n2     6      29.4\n3     7      59.1\n4     8      60.0\n5     9      31.4\n```\n\n\n:::\n:::\n",
    "supporting": [
      "M11-2-Application-R_Programming_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}