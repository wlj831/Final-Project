{
  "hash": "18c352e8cd06eea177d5be72feb9587a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"M05-2-Application: Data Wrangling with Tidyverse in R\"\nauthor: \"William Jackson\"\ndate: '2025-05-15 15:27:12'\nformat: \n  html: \n    toc: true\n    toc-depth: 4\n    theme: sandstone\n    number-sections: true\n    code-line-numbers: true\n    code-fold: false\n    code-link: true\n    embed-resources: true\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  error: true\n---\n\n\n\n\n# Ex 1.\n\n## Now, using the Tidyverse library, set the built-in \"airquality\" dataset to a tibble format named, \"air.tib.\" Confirm that the operation was successful. Next, create a new data frame from \"air.tib\" and assign \"air.df\" to the data frame. Confirm that the operation was successful.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the tidyverse library\nlibrary(tidyverse)\n\n#convert the built-in \"airquality\" dataset to a tibble\n\nair.tib <- as_tibble(airquality)\n\n#confirm the operation was successful \nprint(air.tib)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 153 × 6\n   Ozone Solar.R  Wind  Temp Month   Day\n   <int>   <int> <dbl> <int> <int> <int>\n 1    41     190   7.4    67     5     1\n 2    36     118   8      72     5     2\n 3    12     149  12.6    74     5     3\n 4    18     313  11.5    62     5     4\n 5    NA      NA  14.3    56     5     5\n 6    28      NA  14.9    66     5     6\n 7    23     299   8.6    65     5     7\n 8    19      99  13.8    59     5     8\n 9     8      19  20.1    61     5     9\n10    NA     194   8.6    69     5    10\n# ℹ 143 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert air.tib back to data frame \nair.df <- as.data.frame(air.tib)\n\n#confirm the operation was successful \nprint(air.df [1:20, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Ozone Solar.R Wind Temp Month Day\n1     41     190  7.4   67     5   1\n2     36     118  8.0   72     5   2\n3     12     149 12.6   74     5   3\n4     18     313 11.5   62     5   4\n5     NA      NA 14.3   56     5   5\n6     28      NA 14.9   66     5   6\n7     23     299  8.6   65     5   7\n8     19      99 13.8   59     5   8\n9      8      19 20.1   61     5   9\n10    NA     194  8.6   69     5  10\n11     7      NA  6.9   74     5  11\n12    16     256  9.7   69     5  12\n13    11     290  9.2   66     5  13\n14    14     274 10.9   68     5  14\n15    18      65 13.2   58     5  15\n16    14     334 11.5   64     5  16\n17    34     307 12.0   66     5  17\n18     6      78 18.4   57     5  18\n19    30     322 11.5   68     5  19\n20    11      44  9.7   62     5  20\n```\n\n\n:::\n:::\n\n\n\n\n## Using the tibble you created earlier, find the Ozone amount when the temperature was 97. Show this by both subsetting the entire row and pinpointing the Ozone element only. Also, for both ways, use Base R approach as well as Tidyverse approach.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base R Approach \nair.tib[air.tib$Temp == 97, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  Ozone Solar.R  Wind  Temp Month   Day\n  <int>   <int> <dbl> <int> <int> <int>\n1    76     203   9.7    97     8    28\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract Only the Ozone Value \nair.tib$Ozone[air.tib$Temp == 97]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tidyverse Approach \n\n#load dplyr library \nlibrary(dplyr)\n\n#Subset the Entire Row Where Temp == 97\n\nair.tib %>% filter(Temp == 97)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  Ozone Solar.R  Wind  Temp Month   Day\n  <int>   <int> <dbl> <int> <int> <int>\n1    76     203   9.7    97     8    28\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract only the ozone value \n\nair.tib %>% filter(Temp == 97) %>% pull(Ozone)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76\n```\n\n\n:::\n:::\n\n\n\n\n# Ex 2.\n\nUse \"flights\" data for this exercise.\n\n## Select only the top 10 worst arrival delays for each day for each month for each year. Using the subset of the data, calculate the average delay for each month regardless of the dates or years. Hints: you will want to group the data by year, month, and day. Then, you will want to ungroup the data to remove the groupings and do another grouping to calculate means by month.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#load the library nycflights and library dplyr\nlibrary(nycflights13)\nlibrary(dplyr)\n\n# load the flights dataset \ndata(\"flights\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the top 10 worst arrival delays for each day \n\ntop_delays <- flights %>%\n  group_by(year, month, day) %>% #group by year month and day \n  slice_max(arr_delay, n=10, with_ties = FALSE) %>% # select the top 10 worst days \n  ungroup() #remove group for next step\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\navg_monthly_delay<- top_delays %>%\n  group_by(month) %>% # group by month only\n  summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) #Calculate Avg \n\n# Print the results in minutes\nprint(avg_monthly_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   month avg_arr_delay\n   <int>         <dbl>\n 1     1          200.\n 2     2          199.\n 3     3          202.\n 4     4          220.\n 5     5          202.\n 6     6          249.\n 7     7          254.\n 8     8          195.\n 9     9          166.\n10    10          161.\n11    11          162.\n12    12          225.\n```\n\n\n:::\n:::\n\n\n\n\n## Visualize the data that shows average delays each month. Style the chart appropriately, as you learned in the previous modules, to make the chart presentable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(avg_monthly_delay, aes(x = factor(month), y = avg_arr_delay, fill = factor(month))) +\n  geom_col(show.legend = FALSE) +  \n  labs(\n    title = \"Average Arrival Delay per Month (Top 10 Worst Delays Each Day)\",\n    x = \"Month\",\n    y = \"Average Arrival Delay (minutes)\",\n    caption = \"Data Source: nycflights13\"\n  ) +\n  theme_minimal() +  \n  scale_fill_viridis_d(option = \"inferno\") +  # Better color scale for >9 categories\n  theme(\n    plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14)\n  )\n```\n\n::: {.cell-output-display}\n![](M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Describe what you learned from the data about delays. Since this is an important insight, you will want the audience to pay attention and style the description of insights using appropriate Quarto document features.\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nBased upon the presentation of the data, it appears that the highest months for travel include June, July, and December. This inherently makes sense as these are the most common months to travel for both families and individuals. Most of summer months are common times in which families or individuals will go on their annual vacations, so we see higher delays during these months to more travelers. In December, we see higher delays due to the fact that people are traveling to family for Christmas and New Years. The presentation of the bar graph is simple and gives insight to the most commonly experienced months in which a delay was experienced.\n:::\n\n# Ex 3.\n\nThe final goal of this exercise is to visualize the data. To do so, you will want to understand the data and determine the kind of relationship you would like to visualize. Next you will want to wrangle data to support the visualization objective. In the following sub-questions, you will be asked a step-by-step process. Organize well in your Quarto Markdown by showing sub-question numbers: 3.1, 3.2, 3.3, 3.4, and 3.5 right above each code chunk, except for 3.3. Note that the 3.3 activity doesn't require coding, but you need to provide your answer as text in the text area, not inside the code chunk. This is because When your response is longer than one line inside the code chunk, the response will go out of the boundary of the chunk highlight when knitted.\n\n## Take a look at the built-in data frame \"relig_income\" from tidyr package, which is one of the packages included in the mega package called the Tidyverse package. Since you already loaded it up with the package earlier, the data set should show up when you type it. Perform some built-in functions that will help you understand the data -- type of data, size, missing value, variables, etc. What can you tell about the data set?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the dataset \nhead(relig_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  religion  `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n  <chr>       <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n1 Agnostic       27        34        60        81        76       137        122\n2 Atheist        12        27        37        52        35        70         73\n3 Buddhist       27        21        30        34        33        58         62\n4 Catholic      418       617       732       670       638      1116        949\n5 Don’t kn…      15        14        15        11        10        35         21\n6 Evangeli…     575       869      1064       982       881      1486        949\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# check the structure \nstr(relig_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [18 × 11] (S3: tbl_df/tbl/data.frame)\n $ religion          : chr [1:18] \"Agnostic\" \"Atheist\" \"Buddhist\" \"Catholic\" ...\n $ <$10k             : num [1:18] 27 12 27 418 15 575 1 228 20 19 ...\n $ $10-20k           : num [1:18] 34 27 21 617 14 869 9 244 27 19 ...\n $ $20-30k           : num [1:18] 60 37 30 732 15 ...\n $ $30-40k           : num [1:18] 81 52 34 670 11 982 9 238 24 25 ...\n $ $40-50k           : num [1:18] 76 35 33 638 10 881 11 197 21 30 ...\n $ $50-75k           : num [1:18] 137 70 58 1116 35 ...\n $ $75-100k          : num [1:18] 122 73 62 949 21 949 47 131 15 69 ...\n $ $100-150k         : num [1:18] 109 59 39 792 17 723 48 81 11 87 ...\n $ >150k             : num [1:18] 84 74 53 633 18 414 54 78 6 151 ...\n $ Don't know/refused: num [1:18] 96 76 54 1489 116 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# summary of data \nsummary(relig_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   religion             <$10k           $10-20k          $20-30k      \n Length:18          Min.   :  1.00   Min.   :  2.00   Min.   :   3.0  \n Class :character   1st Qu.: 12.25   1st Qu.: 14.75   1st Qu.:  17.0  \n Mode  :character   Median : 20.00   Median : 27.00   Median :  33.5  \n                    Mean   :107.22   Mean   :154.50   Mean   : 186.5  \n                    3rd Qu.:170.00   3rd Qu.:193.00   3rd Qu.: 192.0  \n                    Max.   :575.00   Max.   :869.00   Max.   :1064.0  \n    $30-40k          $40-50k         $50-75k           $75-100k     \n Min.   :  4.00   Min.   :  2.0   Min.   :   7.00   Min.   :  3.00  \n 1st Qu.: 15.75   1st Qu.: 15.0   1st Qu.:  34.25   1st Qu.: 25.25  \n Median : 40.00   Median : 34.0   Median :  66.50   Median : 65.50  \n Mean   :183.44   Mean   :171.4   Mean   : 288.06   Mean   :221.67  \n 3rd Qu.:198.75   3rd Qu.:166.8   3rd Qu.: 201.50   3rd Qu.:128.75  \n Max.   :982.00   Max.   :881.0   Max.   :1486.00   Max.   :949.00  \n   $100-150k         >150k        Don't know/refused\n Min.   :  4.0   Min.   :  4.00   Min.   :   8.00   \n 1st Qu.: 22.5   1st Qu.: 23.75   1st Qu.:  41.25   \n Median : 48.5   Median : 53.50   Median :  74.50   \n Mean   :177.6   Mean   :144.89   Mean   : 340.06   \n 3rd Qu.:103.5   3rd Qu.:134.25   3rd Qu.: 294.75   \n Max.   :792.0   Max.   :634.00   Max.   :1529.00   \n```\n\n\n:::\n\n```{.r .cell-code}\n# missing values \nsum(is.na(relig_income))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# dimensions of dataset \ndim(relig_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18 11\n```\n\n\n:::\n\n```{.r .cell-code}\n# check column names \ncolnames(relig_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"religion\"           \"<$10k\"              \"$10-20k\"           \n [4] \"$20-30k\"            \"$30-40k\"            \"$40-50k\"           \n [7] \"$50-75k\"            \"$75-100k\"           \"$100-150k\"         \n[10] \">150k\"              \"Don't know/refused\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# view the table \nprint(relig_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 11\n   religion `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n   <chr>      <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n 1 Agnostic      27        34        60        81        76       137        122\n 2 Atheist       12        27        37        52        35        70         73\n 3 Buddhist      27        21        30        34        33        58         62\n 4 Catholic     418       617       732       670       638      1116        949\n 5 Don’t k…      15        14        15        11        10        35         21\n 6 Evangel…     575       869      1064       982       881      1486        949\n 7 Hindu          1         9         7         9        11        34         47\n 8 Histori…     228       244       236       238       197       223        131\n 9 Jehovah…      20        27        24        24        21        30         15\n10 Jewish        19        19        25        25        30        95         69\n11 Mainlin…     289       495       619       655       651      1107        939\n12 Mormon        29        40        48        51        56       112         85\n13 Muslim         6         7         9        10         9        23         16\n14 Orthodox      13        17        23        32        32        47         38\n15 Other C…       9         7        11        13        13        14         18\n16 Other F…      20        33        40        46        49        63         46\n17 Other W…       5         2         3         4         2         7          3\n18 Unaffil…     217       299       374       365       341       528        407\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n## It is a tibble data format with 18 rows and 11 variables. To learn more about this data, look it up in help. Type the code to do so.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\"relig_income\")\n```\n:::\n\n\n\n\n> Hint: use help() function. What does it tell you about the data and variables? Make sure you type your responses outside below the cord chunk.\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nThe function provides documentation on the data set, explaining what it represents, the source of the data, and its structure. The variables will also be present in the data set and will include the names, types and meanings. With usage the file can help show you examples of how to use the data in analysis or how to access variables within the data set.\n:::\n\n## Now, go back to the data. Think about the relationships among the variables you want to visualize. One potential idea is to show what the frequency (count) of income brackets look like by the religion people practice. Does the current data allow you to support your goal? Why or why not. If the data doesn't support the goal, how should the data be reshaped to support the goal?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Reshape the data to long format\nrelig_income_long <- relig_income %>%\n  pivot_longer(cols = -religion, names_to = \"income_bracket\", values_to = \"count\")\n```\n:::\n\n\n\n\n> Hint: In your response, consider the conditions for tidy data and if the current data is tidy. Data is tidy when (1) observations in the rows are unique, (2) variables in the columns are consistent and unique so that we can perform statistics that are interpretable.\n\n## Reshape the data. Further, draw a plot that shows income distribution by religion. Do all the necessary operations to make the chart visualize the tidied data well.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the plot\nggplot(relig_income_long, aes(x = income_bracket, y = count, fill = religion)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  labs(title = \"Income Bracket Distribution by Religion\",\n       x = \"Income Bracket\",\n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n> Hint: Successful data should have four columns: \"religion\", \"income\", and \"count\". Assign \"relig_income_longer\" to the tydy data and print it out. The column \"Don't know/refused\" can be deleted if you wish.\n\n## Next, redo 3.4 using one long chain of codes from the first step to the last that spans the whole data wrangling and visualization.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Perform the entire data wrangling and visualization in one long chain\nggplot(relig_income %>%\n         pivot_longer(cols = -religion, names_to = \"income_bracket\", values_to = \"count\"), \n       aes(x = income_bracket, y = count, fill = religion)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Stacked bar chart\n  labs(title = \"Income Distribution by Religion\",\n       x = \"Income Bracket\",\n       y = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels\n```\n\n::: {.cell-output-display}\n![](M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n# Ex 4.\n\nJust like Question 3, the goal is to visualize the data and do the appropriate wrangling needed to support the goal. First, understand the data and think about what kinds of relationships would be most interesting to show in visualization given the data. If the data is not in ideal shape to support your visualization goal, do all the wrangling needed to support your goal. Organize your codebook well by showing sub-question numbers: 4.1, 4.2, 4.3, 4.4, and 4.5. Note that the 4.3 activity doesn't require coding, so you should provide your answer in the text area.\n\n## Take a look at the built-in data frame \"us_rent_income\" from tidyr package, which is one of the packages included in the mega package called Tidyverse package. Since you already loaded it up with the package earlier, the data set should show up when you type it. Perform some built-in functions that will help you understand the data -- type of data, size, missing value, variables, etc. What can you tell about the data set?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the first few rows of the data\nhead(us_rent_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  GEOID NAME    variable estimate   moe\n  <chr> <chr>   <chr>       <dbl> <dbl>\n1 01    Alabama income      24476   136\n2 01    Alabama rent          747     3\n3 02    Alaska  income      32940   508\n4 02    Alaska  rent         1200    13\n5 04    Arizona income      27517   148\n6 04    Arizona rent          972     4\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check the structure of the data (types of data in each column)\nstr(us_rent_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [104 × 5] (S3: tbl_df/tbl/data.frame)\n $ GEOID   : chr [1:104] \"01\" \"01\" \"02\" \"02\" ...\n $ NAME    : chr [1:104] \"Alabama\" \"Alabama\" \"Alaska\" \"Alaska\" ...\n $ variable: chr [1:104] \"income\" \"rent\" \"income\" \"rent\" ...\n $ estimate: num [1:104] 24476 747 32940 1200 27517 ...\n $ moe     : num [1:104] 136 3 508 13 148 4 165 5 109 3 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get the dimensions of the data (rows and columns)\ndim(us_rent_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 104   5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get summary statistics of the dataset\nsummary(us_rent_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    GEOID               NAME             variable            estimate      \n Length:104         Length:104         Length:104         Min.   :  464.0  \n Class :character   Class :character   Class :character   1st Qu.:  864.5  \n Mode  :character   Mode  :character   Mode  :character   Median : 1507.0  \n                                                          Mean   :14923.1  \n                                                          3rd Qu.:28872.0  \n                                                          Max.   :43198.0  \n                                                          NA's   :1        \n      moe       \n Min.   :  2.0  \n 1st Qu.:  4.5  \n Median : 18.0  \n Mean   : 95.5  \n 3rd Qu.:153.5  \n Max.   :681.0  \n NA's   :1      \n```\n\n\n:::\n\n```{.r .cell-code}\n# Check for missing values\nsum(is.na(us_rent_income))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n#Entire Dataset \nprint(us_rent_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 104 × 5\n   GEOID NAME       variable estimate   moe\n   <chr> <chr>      <chr>       <dbl> <dbl>\n 1 01    Alabama    income      24476   136\n 2 01    Alabama    rent          747     3\n 3 02    Alaska     income      32940   508\n 4 02    Alaska     rent         1200    13\n 5 04    Arizona    income      27517   148\n 6 04    Arizona    rent          972     4\n 7 05    Arkansas   income      23789   165\n 8 05    Arkansas   rent          709     5\n 9 06    California income      29454   109\n10 06    California rent         1358     3\n# ℹ 94 more rows\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nThe data set is rent and income statistics in the US. The summary range gives me an overview of all of the data provided from the online source. Print function allows me to see the entirity of the data so that all data can be reviewed. The sum is.na function allowed me to skim the data to finding missing variables. Based upon this review, there are 2 missing variables throughout the data set. I will either delete the missing data or take the averages.\n:::\n\n4.2. You will see five variables: GEOID, NAME, variable, estimate, and moe. To understand the data, type a code that will show you the description of the data in the help. Then read the description of the variables. What does it tell you about the data and variables? What does each variable mean? Make sure you type your responses outside below the cord chunk.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#help function to review source and information that is in the data set \nhelp(us_rent_income)\n```\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nThe help function allows for me to review the data in more conceptual aspect. It gives me the source of that (how it was collected), the variables measured in the data, and the index that it was collected in the tidyr package. The variables are as follows: GEOID - the unique identifier for geographic region, NAME - the name of the geographic region (state name), Variable - the variable income such as yearly income and monthly rent, estimate - the actual or estimated value of interest, and moe - margin of error, which is the uncertainty in the estimate (90%).\n:::\n\n## Now, go back to the data. Think about the relationships among the variables you want to visualize. One potential idea is to show the relationship between income and rent across the states. Ask yourself if the current data shape supports your visualization goal. Why or why not? If the data doesn't support the goal, how should the data be reshaped to support the goal?\n\n> Hints: In your response, consider the conditions for tidy data and if the current data is tidy. Data is tidy when (1) observations in the rows are unique, (2) variables in the columns are consistent and unique so that we can perform statistics that are interpretable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reshape the data so that 'variable' values become separate columns\nus_rent_income_tidy <- us_rent_income %>%\n  pivot_wider(names_from = variable, values_from = estimate)\n\n# View the transformed dataset\nhead(us_rent_income_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  GEOID NAME      moe income  rent\n  <chr> <chr>   <dbl>  <dbl> <dbl>\n1 01    Alabama   136  24476    NA\n2 01    Alabama     3     NA   747\n3 02    Alaska    508  32940    NA\n4 02    Alaska     13     NA  1200\n5 04    Arizona   148  27517    NA\n6 04    Arizona     4     NA   972\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nThe data set is now more properly organized to look at the relationship between the location, income, and rent. This structure will allow for easy of visualization between the annual income and the rent associated with geographic regions. This data can now be presented in a scatter plot to give a better understanding of the relationship between income and rent.\n:::\n\n4.4. Reshape the data. Further, draw a plot that shows the relationship between the income and rent across the states. Do all the necessary operations to make the chart visualize the tidied data well.\n\n> Hint: The successful data will have six columns: \"GEOID\", \"NAME\", \"estimate_income\", \"estimate_rent\", \"moe_income\", and \"moe_rent.\" Assign \"us_rent_income_wider\" to the tydy data and print it out. whereas \"names_from\" argument has one variable -- \"variable\", \"values_from\" argument has two variables -- \"estimate\" and \"moe.\" Multiple variables can be combined with c() function like this: c(estimate, moe).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reshape the data\nus_rent_income_wider <- us_rent_income %>%\n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  )\n\n# Print the transformed dataset\nprint(us_rent_income_wider)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_income estimate_rent moe_income moe_rent\n   <chr> <chr>                          <dbl>         <dbl>      <dbl>    <dbl>\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Scatter plot of Income vs. Rent\nggplot(us_rent_income_wider, aes(x = estimate_income, y = estimate_rent)) +\n  geom_point(color = \"blue\", size = 3, alpha = 0.7) +  # Blue points for visibility\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\") +  # Linear regression line\n  labs(\n    title = \"Relationship Between Income and Rent Across States\",\n    x = \"Estimated Income ($)\",\n    y = \"Estimated Rent ($)\",\n    caption = \"Data Source: tidyr::us_rent_income\"\n  ) +\n  theme_minimal() +  # Clean and modern theme\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14)\n  )\n```\n\n::: {.cell-output-display}\n![](M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nThe scatter plot is useful in determining the relationship between the annual rent and the monthly rent. There appears to be a high correlation between the values and it is likely that rental prices will increase as income is higher.\n:::\n\n# Ex 5.\n\nRun this code below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmba <- data.frame(player=c('A', 'A', 'B', 'B', 'C', 'C'),\n                  year=c(1, 2, 1, 2, 1, 2),\n                  stats=c('22/2/3', '29/3/4', '18/6/7', '11/1/2', '12/1/1',                                   '19/2/4'))\n```\n:::\n\n\n\n\n## Next, separate the number of the stats column into \"points,\" \"assists,\" and \"steals.\" Assign this data frame to a new name, \"mba_sep\". Print out the data set.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Separate the stats column into points, assists, and steals\nmba_sep <- mba %>%\n  separate(stats, into = c(\"points\", \"assists\", \"steals\"), sep = \"/\")\n\n# Print the transformed dataset\nprint(mba_sep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  player year points assists steals\n1      A    1     22       2      3\n2      A    2     29       3      4\n3      B    1     18       6      7\n4      B    2     11       1      2\n5      C    1     12       1      1\n6      C    2     19       2      4\n```\n\n\n:::\n:::\n\n\n\n\n## Reverse the last question by uniting three columns -- points, assists and steals -- into one column. Assign \"mba_uni\" to the data frame. Then confirm the work by printing it out on the screen.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Unite the three columns back into one\nmba_uni <- mba_sep %>%\n  unite(stats, points, assists, steals, sep = \"/\")\n\n# Print the transformed dataset\nprint(mba_uni)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  player year  stats\n1      A    1 22/2/3\n2      A    2 29/3/4\n3      B    1 18/6/7\n4      B    2 11/1/2\n5      C    1 12/1/1\n6      C    2 19/2/4\n```\n\n\n:::\n:::\n\n\n\n\n# Ex 6.\n\nUse the \"flights\" data.\n\n## Filter the data by including only the flights that were not canceled. For each day, calculate the first and last departure times from NYC airport. Then, for each month, select one day such that the first flight departure was the latest for the month. Do the necessary wrangling and show the results in descending order of \"first departure time\" in a table using the `gt`/`gtExtras.`\n\n> Hints: You can use group_by() and summarize(), filter(), ungroup(), and arrange() functions. In the end, you should have 12 rows of data frame consisting of columns such as year, month, day, first_dep, last_dep, and n.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the gt/gtextras function \nlibrary(gt)\nlibrary(gtExtras)\n\n# Filter out canceled flights (i.e., keep only flights with non-missing departure times)\nflights_filtered <- flights %>%\n  filter(!is.na(dep_time))\n\n# Calculate first and last departure times for each day\ndaily_departures <- flights_filtered %>%\n  group_by(year, month, day) %>%\n  summarize(\n    first_dep = min(dep_time, na.rm = TRUE),\n    last_dep = max(dep_time, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Select the day in each month with the latest \"first departure\"\nlatest_first_dep_per_month <- daily_departures %>%\n  group_by(year, month) %>%\n  slice_max(first_dep, n = 1) %>% # Select the row with the maximum first_dep in each month\n  ungroup() %>%\n  arrange(desc(first_dep))  # Arrange in descending order\n\n# Display results using gt\nlatest_first_dep_per_month %>%\n  gt() %>%\n  tab_header(\n    title = \"Latest First Departure per Month\",\n    subtitle = \"NYC Flights (Non-Canceled Flights Only)\"\n  ) %>%\n  fmt_time(columns = c(first_dep, last_dep), time_style = \"hms\") %>%\n  cols_label(\n    year = \"Year\",\n    month = \"Month\",\n    day = \"Day\",\n    first_dep = \"First Departure\",\n    last_dep = \"Last Departure\"\n  ) %>%\n  tab_options(\n    table.font.size = 14,\n    heading.title.font.size = 18,\n    heading.subtitle.font.size = 14\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"mawhtpmtuo\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#mawhtpmtuo table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#mawhtpmtuo thead, #mawhtpmtuo tbody, #mawhtpmtuo tfoot, #mawhtpmtuo tr, #mawhtpmtuo td, #mawhtpmtuo th {\n  border-style: none;\n}\n\n#mawhtpmtuo p {\n  margin: 0;\n  padding: 0;\n}\n\n#mawhtpmtuo .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 14px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#mawhtpmtuo .gt_title {\n  color: #333333;\n  font-size: 18px;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#mawhtpmtuo .gt_subtitle {\n  color: #333333;\n  font-size: 14px;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#mawhtpmtuo .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#mawhtpmtuo .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#mawhtpmtuo .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#mawhtpmtuo .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#mawhtpmtuo .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#mawhtpmtuo .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#mawhtpmtuo .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#mawhtpmtuo .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#mawhtpmtuo .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#mawhtpmtuo .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#mawhtpmtuo .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#mawhtpmtuo .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mawhtpmtuo .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#mawhtpmtuo .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#mawhtpmtuo .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#mawhtpmtuo .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mawhtpmtuo .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#mawhtpmtuo .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mawhtpmtuo .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#mawhtpmtuo .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mawhtpmtuo .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#mawhtpmtuo .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mawhtpmtuo .gt_left {\n  text-align: left;\n}\n\n#mawhtpmtuo .gt_center {\n  text-align: center;\n}\n\n#mawhtpmtuo .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#mawhtpmtuo .gt_font_normal {\n  font-weight: normal;\n}\n\n#mawhtpmtuo .gt_font_bold {\n  font-weight: bold;\n}\n\n#mawhtpmtuo .gt_font_italic {\n  font-style: italic;\n}\n\n#mawhtpmtuo .gt_super {\n  font-size: 65%;\n}\n\n#mawhtpmtuo .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#mawhtpmtuo .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#mawhtpmtuo .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#mawhtpmtuo .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#mawhtpmtuo .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#mawhtpmtuo .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#mawhtpmtuo .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#mawhtpmtuo .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#mawhtpmtuo div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"5\" class=\"gt_heading gt_title gt_font_normal\" style>Latest First Departure per Month</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"5\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>NYC Flights (Non-Canceled Flights Only)</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"year\">Year</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"month\">Month</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"day\">Day</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"first_dep\">First Departure</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"last_dep\">Last Departure</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">2</td>\n<td headers=\"day\" class=\"gt_row gt_right\">9</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">901</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2358</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">1</td>\n<td headers=\"day\" class=\"gt_row gt_right\">20</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">525</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2356</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">9</td>\n<td headers=\"day\" class=\"gt_row gt_right\">29</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">521</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2356</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">10</td>\n<td headers=\"day\" class=\"gt_row gt_right\">6</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">519</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2346</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">11</td>\n<td headers=\"day\" class=\"gt_row gt_right\">3</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">519</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2358</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">3</td>\n<td headers=\"day\" class=\"gt_row gt_right\">3</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">509</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2353</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">12</td>\n<td headers=\"day\" class=\"gt_row gt_right\">18</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">500</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2358</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">5</td>\n<td headers=\"day\" class=\"gt_row gt_right\">29</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">457</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2352</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">6</td>\n<td headers=\"day\" class=\"gt_row gt_right\">15</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">456</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2356</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">4</td>\n<td headers=\"day\" class=\"gt_row gt_right\">30</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">455</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2351</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">8</td>\n<td headers=\"day\" class=\"gt_row gt_right\">31</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">455</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2359</td></tr>\n    <tr><td headers=\"year\" class=\"gt_row gt_right\">2013</td>\n<td headers=\"month\" class=\"gt_row gt_right\">7</td>\n<td headers=\"day\" class=\"gt_row gt_right\">5</td>\n<td headers=\"first_dep\" class=\"gt_row gt_right\">38</td>\n<td headers=\"last_dep\" class=\"gt_row gt_right\">2358</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nYes, it orders the table in order with first departure of each month. This gives us an interesting order of the data that can be helpful in interpretation.\n:::\n\n## Wrangle the data to find out the top 5 destinations to which carriers flew the most. Print the data in a nice table. Does the finding make sense; discuss the outcome.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find the top 5 destinations with the most flights\ntop_5_destinations <- flights %>%\n  filter(!is.na(dest)) %>%  # Ensure no missing destination values\n  count(dest, sort = TRUE) %>%  # Count flights per destination\n  top_n(5, n)  # Select the top 5 destinations\n\n# Display results in a formatted table using gt\ntop_5_destinations %>%\n  gt() %>%\n  tab_header(\n    title = \"Top 5 Flight Destinations\",\n    subtitle = \"Most Frequent Destinations from NYC (2013)\"\n  ) %>%\n  cols_label(\n    dest = \"Destination Airport\",\n    n = \"Total Flights\"\n  ) %>%\n  tab_options(\n    table.font.size = px(14),\n    heading.title.font.size = px(18),\n    heading.subtitle.font.size = px(14)\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"jjbkuxmyeu\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#jjbkuxmyeu table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#jjbkuxmyeu thead, #jjbkuxmyeu tbody, #jjbkuxmyeu tfoot, #jjbkuxmyeu tr, #jjbkuxmyeu td, #jjbkuxmyeu th {\n  border-style: none;\n}\n\n#jjbkuxmyeu p {\n  margin: 0;\n  padding: 0;\n}\n\n#jjbkuxmyeu .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 14px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#jjbkuxmyeu .gt_title {\n  color: #333333;\n  font-size: 18px;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#jjbkuxmyeu .gt_subtitle {\n  color: #333333;\n  font-size: 14px;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#jjbkuxmyeu .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#jjbkuxmyeu .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#jjbkuxmyeu .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#jjbkuxmyeu .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#jjbkuxmyeu .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#jjbkuxmyeu .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#jjbkuxmyeu .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#jjbkuxmyeu .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#jjbkuxmyeu .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#jjbkuxmyeu .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#jjbkuxmyeu .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#jjbkuxmyeu .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#jjbkuxmyeu .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#jjbkuxmyeu .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#jjbkuxmyeu .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#jjbkuxmyeu .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#jjbkuxmyeu .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#jjbkuxmyeu .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#jjbkuxmyeu .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#jjbkuxmyeu .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#jjbkuxmyeu .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#jjbkuxmyeu .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#jjbkuxmyeu .gt_left {\n  text-align: left;\n}\n\n#jjbkuxmyeu .gt_center {\n  text-align: center;\n}\n\n#jjbkuxmyeu .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#jjbkuxmyeu .gt_font_normal {\n  font-weight: normal;\n}\n\n#jjbkuxmyeu .gt_font_bold {\n  font-weight: bold;\n}\n\n#jjbkuxmyeu .gt_font_italic {\n  font-style: italic;\n}\n\n#jjbkuxmyeu .gt_super {\n  font-size: 65%;\n}\n\n#jjbkuxmyeu .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#jjbkuxmyeu .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#jjbkuxmyeu .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#jjbkuxmyeu .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#jjbkuxmyeu .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#jjbkuxmyeu .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#jjbkuxmyeu .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#jjbkuxmyeu .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#jjbkuxmyeu div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal\" style>Top 5 Flight Destinations</td>\n    </tr>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Most Frequent Destinations from NYC (2013)</td>\n    </tr>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"dest\">Destination Airport</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n\">Total Flights</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"dest\" class=\"gt_row gt_left\">ORD</td>\n<td headers=\"n\" class=\"gt_row gt_right\">17283</td></tr>\n    <tr><td headers=\"dest\" class=\"gt_row gt_left\">ATL</td>\n<td headers=\"n\" class=\"gt_row gt_right\">17215</td></tr>\n    <tr><td headers=\"dest\" class=\"gt_row gt_left\">LAX</td>\n<td headers=\"n\" class=\"gt_row gt_right\">16174</td></tr>\n    <tr><td headers=\"dest\" class=\"gt_row gt_left\">BOS</td>\n<td headers=\"n\" class=\"gt_row gt_right\">15508</td></tr>\n    <tr><td headers=\"dest\" class=\"gt_row gt_left\">MCO</td>\n<td headers=\"n\" class=\"gt_row gt_right\">14082</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nThe findings of the most traveled to airports in the US is not extremely unusual. We see that there is common travel to Los Angeles, Chicago, Boston, and Orlando. Out of the major cities, it would only appear unusual that Boston and Orlando are on the list, but it is likely that these airports are either layovers for the cities or central airports for air traffic. Specifically, anyone flying into Boston likely has a layover in NYC, and anyone flying to the south eastern US has a layover in Orlando airport. If these are true, that would suggest that the data is accurate. With LA, Chicago, and Atlanta; these cities are large metros that have a lot of economic movement so there is no surprise there. You could even say that Atlanta is a major airport hub for layovers similar to Dallas and Orlando.\n:::\n\n# Ex 7.\n\n## Using the data frame \"air.tib,\" find out how many missing values exist in the column \"Solar.R and what percent of the record the missing values account for\". In doing so, try Tidyverse way of coding. Next, create a variable called \"Solar_Mean\" and assign the mean of the column \"Solar.R\" to it. Finally, replace all the missing values in the column \"Solar.R\" with \"Soar_Mean\". Confirm that there are no more missing values in this column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count missing values and calculate percentage\nmissing_count <- air.tib %>%\n  summarise(missing = sum(is.na(Solar.R)),\n            total = n(),\n            percent_missing = (missing / total) * 100)\n\n# Print missing value count and percentage\nprint(missing_count)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  missing total percent_missing\n    <int> <int>           <dbl>\n1       7   153            4.58\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compute mean of Solar.R excluding NAs\nSolar_Mean <- air.tib %>%\n  summarise(Solar_Mean = mean(Solar.R, na.rm = TRUE)) %>%\n  pull(Solar_Mean)\n\n# Replace missing values in Solar.R with the computed mean\nair.tib <- air.tib %>%\n  mutate(Solar.R = ifelse(is.na(Solar.R), Solar_Mean, Solar.R))\n\n# Confirm that there are no more missing values\nmissing_check <- sum(is.na(air.tib$Solar.R))\nprint(paste(\"Missing values in Solar.R after replacement:\", missing_check))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Missing values in Solar.R after replacement: 0\"\n```\n\n\n:::\n:::\n\n\n\n\n# Ex 8.\n\n## Use the air.tib data frame. Here, the goal is to visualize the monthly total temperature (silly?) with a barplot with the Month on the y-axis and the total temperature on the x-axis. To do so, do the appropriate wrangling and visualization in one chain of codes. To do so, do the following.\n\n1.  To create the total monthly temperature, count the number of months weighted by Temp.\n2.  Change Month's data from numeric value to associated character: from 5 to \"May\", 6 to \"June\", 7 to \"July\", 8 to \"August\", and 9 to \"September\".\n3.  Convert Month to a factor.\n4.  Reorder Month by the size of the total temperature in descending order.\n\nAfter you transformed the data s above in two columns -- Month and n, you can visualize the table in a barplot. As usual, do the necessary beautification of the chart to make it presentable to the audience. There are at least two ways to wrangle to get the same outcome. If you can do both, you will get a bonus point.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Wrangle the data and visualize it in one chain\nair.tib %>%\n  # 1. Calculate total temperature by month\n  group_by(Month) %>%\n  summarise(total_temp = sum(Temp, na.rm = TRUE)) %>%\n  # 2. Change Month from numeric to character\n  mutate(Month = recode(Month, `5` = \"May\", `6` = \"June\", `7` = \"July\", `8` = \"August\", `9` = \"September\")) %>%\n  # 3. Convert Month to factor\n  mutate(Month = factor(Month, levels = c(\"May\", \"June\", \"July\", \"August\", \"September\"))) %>%\n  # 4. Reorder Month by total temperature in descending order\n  arrange(desc(total_temp)) %>%\n  # 5. Visualize using a barplot\n  ggplot(aes(x = total_temp, y = reorder(Month, total_temp), fill = Month)) +\n  geom_col(show.legend = FALSE) + # Bar chart\n  labs(\n    title = \"Total Temperature by Month\",\n    x = \"Total Temperature\",\n    y = \"Month\"\n  ) +\n  theme_minimal() + # Clean theme\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14)\n  )\n```\n\n::: {.cell-output-display}\n![](M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n## Bonus Point\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\n\nair.tib %>%\n  group_by(Month) %>%\n  summarise(total_temp = sum(Temp, na.rm = TRUE)) %>%\n  mutate(Month = recode(Month, `5` = \"May\", `6` = \"June\", `7` = \"July\", `8` = \"August\", `9` = \"September\")) %>%\n  mutate(Month = fct_reorder(Month, total_temp, .desc = TRUE)) %>%\n  ggplot(aes(x = total_temp, y = Month, fill = Month)) +\n  geom_col(show.legend = FALSE) +\n  labs(title = \"Total Temperature by Month\", x = \"Total Temperature\", y = \"Month\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n# Ex 9.\n\nUsing the air.tib data frame, group the data set by Month. Next, find out the maximum temperature for each month and display the result. Then, pipe the wrangled data into ggplot() and draw an appropriate chart.\n\n> Hint. There is more than one way to do this. You may use a combination of the pipe operator, group_by(), summarize(), and max(). Also, order the month by descending order of the maximum temperature of the month. Do all things to make the visualization most effective.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\n\n# Wrangle the data and visualize it in one chain with a different color scheme\nair.tib %>%\n  # 1. Group the data by Month\n  group_by(Month) %>%\n  # 2. Find the maximum temperature for each month\n  summarise(max_temp = max(Temp, na.rm = TRUE)) %>%\n  # 3. Order the months by the maximum temperature in descending order\n  arrange(desc(max_temp)) %>%\n  # 4. Visualize the results using ggplot with a different color scheme\n  ggplot(aes(x = reorder(Month, -max_temp), y = max_temp, fill = factor(Month))) +\n  geom_col(show.legend = FALSE) +  # Bar chart\n  labs(\n    title = \"Maximum Temperature by Month\",\n    x = \"Month\",\n    y = \"Maximum Temperature (°F)\",\n    caption = \"Data from air.tib\"\n  ) +\n  theme_minimal() +  # Clean theme\n  scale_fill_brewer(palette = \"Set3\") +  # Different color palette from RColorBrewer\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14)\n  )\n```\n\n::: {.cell-output-display}\n![](M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n# Ex 10.\n\nUsing the pipe operator on the tibble, \"air.tib\", create a new column called \"temp_wind\", which is the division of the \"Temp\" by the \"Wind\" column. Further, investigate the relationship between Ozone amount and \"temp_wind\" by visualizing the two variables in a chart. Visualize also the associations between Wind and Ozone as well as Wind and Temp. Visualize all three sets of relationships in a single chart. What can you infer about the relationships among the variables? write a chain of code from the beginning to the end of both wrangling and visualization.\n\n> Hint: It might be helpful to draw the three visualization separately and then think about how to show them in one chart. To do so, you will need to reshape the data so that you can utilize faceting in ggplot2. In any case, you will see the association between Ozone and \"temp_wind\" will be stronger than the association between Ozone and the temperature or wind separately before Temp and Wind are combined. Investigate the separate relationships and you will understand why the new variable has a stronger impact on Ozone.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Wrangle the data to create 'temp_wind' and visualize the relationships\nair.tib %>%\n  # 1. Create a new column 'temp_wind' as the division of 'Temp' by 'Wind'\n  mutate(temp_wind = Temp / Wind) %>%\n  # 2. Gather the necessary columns into a long format\n  gather(key = \"relationship\", value = \"value\", Temp, Wind, temp_wind) %>%\n  # 3. Plot the relationships\n  ggplot(aes(x = value, y = Ozone)) +\n  geom_point(aes(color = relationship), size = 3, alpha = 0.7) +\n  facet_wrap(~ relationship, scales = \"free\", ncol = 2) +  # Facet the chart into different relationships\n  labs(\n    title = \"Relationships Between Ozone and Other Variables\",\n    x = \"Variable Value\",\n    y = \"Ozone\",\n    caption = \"Data from air.tib\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    strip.text = element_text(size = 14, face = \"bold\")  # Styling the facet labels\n  )\n```\n\n::: {.cell-output-display}\n![](M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Response\n\nIt would appear when reviewing the data of all three variables, that when there is higher temperature values there appears to be a degradation of the ozone layer or higher ozone values (positive correlation). With temperature and wind, as the temperature increases it appears that that wind becomes less powerful. In the case of strong winds, we see that the ozone layer value is lower thus a negative correlation.\n:::\n",
    "supporting": [
      "M05-2-Application-Data-Wrangling-with-Tidyverse-in-R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}